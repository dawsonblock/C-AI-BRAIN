name: Brain-AI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Python dependencies
      run: |
        cd brain-ai-rest-service
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Set up C++ toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake g++ libssl-dev
    
    - name: Build C++ with sanitizers
      run: |
        cd brain-ai
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug \
              -DUSE_SANITIZERS=ON \
              -DBUILD_PYTHON_BINDINGS=ON \
              -DBUILD_GRPC_SERVICE=OFF \
              -DBUILD_TESTS=ON ..
        make -j$(nproc)
    
    - name: Run C++ tests
      run: |
        cd brain-ai/build
        ctest --output-on-failure --verbose
    
    - name: Run Python tests
      run: |
        cd brain-ai-rest-service
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./brain-ai-rest-service/coverage.xml
    
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, cpp
    
    - name: Build for CodeQL
      run: |
        cd brain-ai
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_PYTHON_BINDINGS=OFF \
              -DBUILD_GRPC_SERVICE=OFF ..
        make -j$(nproc)
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r brain-ai-rest-service/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json
  
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker-compose build
    
    - name: Run Docker health checks
      run: |
        docker-compose up -d
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker-compose down
  
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install linters
      run: |
        pip install flake8 black mypy
    
    - name: Run flake8
      run: |
        cd brain-ai-rest-service
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Check formatting with black
      run: |
        cd brain-ai-rest-service
        black --check .
    
    - name: Run C++ linter
      run: |
        sudo apt-get install -y cppcheck
        cppcheck --enable=warning,style --error-exitcode=1 brain-ai/src/ || true

