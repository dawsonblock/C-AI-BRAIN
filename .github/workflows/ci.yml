name: ci

on:
  push:
    branches: ['**']
  pull_request:

jobs:
  build_core:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build ccache python3-dev

      - name: Configure & build
        env:
          CC: ccache gcc
          CXX: ccache g++
        run: |
          cd brain-ai
          mkdir -p build && cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON ..
          ninja

      - name: Run C++ tests
        run: |
          cd brain-ai/build
          ctest --output-on-failure

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: brain-ai/build/Testing/Temporary/**/*
          if-no-files-found: ignore

  lint_py:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            brain-ai-rest-service/requirements.txt

      - name: Install tooling
        run: |
          pip install -r brain-ai-rest-service/requirements.txt
          pip install ruff mypy

      - name: Ruff lint
        run: ruff check brain-ai-rest-service/app

      - name: Mypy type check
        run: mypy brain-ai-rest-service/app

  unit_py:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            brain-ai-rest-service/requirements.txt

      - name: Install deps
        run: |
          pip install -r brain-ai-rest-service/requirements.txt
          pip install pytest

      - name: Run unit tests
        run: |
          pytest brain-ai-rest-service/tests -q

  e2e:
    needs: [build_core]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            brain-ai-rest-service/requirements.txt

      - name: Install pytest deps
        run: |
          pip install -r brain-ai-rest-service/requirements.txt
          pip install pytest requests

      - name: Build Docker images
        run: docker compose build

      - name: Launch stack
        run: docker compose up -d

      - name: Install curl
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Wait for REST service
        run: |
          for i in $(seq 1 60); do
            if curl -sSf http://127.0.0.1:5001/readyz > /dev/null; then
              exit 0
            fi
            sleep 2
          done
          echo "REST service did not become ready" >&2
          docker compose logs rest
          exit 1

      - name: Run e2e tests
        env:
          API_KEY: devkey
          API_URL: http://127.0.0.1:5001
        run: pytest tests/e2e -q

      - name: Collect logs
        if: always()
        run: docker compose logs > compose.log

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: compose.log

      - name: Tear down
        if: always()
        run: docker compose down -v

  security:
    needs: [lint_py, unit_py]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Bandit scan
        run: |
          pip install bandit
          bandit -r brain-ai-rest-service -ll -o bandit.json -f json

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: cpp, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: CodeQL analyze
        uses: github/codeql-action/analyze@v3
